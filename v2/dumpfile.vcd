$date
	Sat Jan 18 10:18:43 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module execute_tb $end
$var wire 4 ! rd_e [3:0] $end
$var wire 1 " reg_write_e $end
$var wire 32 # write_data_e [31:0] $end
$var wire 3 $ res_src_e [2:0] $end
$var wire 32 % pc_target_e [31:0] $end
$var wire 1 & pc_src_e $end
$var wire 32 ' pc_plus4_e [31:0] $end
$var wire 1 ( mem_write_e $end
$var wire 3 ) funct3_e [14:12] $end
$var wire 32 * alu_result_e [31:0] $end
$var reg 1 + adder_src_d $end
$var reg 4 , alu_control_d [3:0] $end
$var reg 1 - alu_src_a_d $end
$var reg 1 . alu_src_b_d $end
$var reg 1 / branch_d $end
$var reg 1 0 clk $end
$var reg 3 1 funct3_d [14:12] $end
$var reg 32 2 imm_val_d [31:0] $end
$var reg 1 3 jump_d $end
$var reg 1 4 mem_write_d $end
$var reg 32 5 pc_d [31:0] $end
$var reg 32 6 pc_plus4_d [31:0] $end
$var reg 32 7 rd1_d [31:0] $end
$var reg 32 8 rd2_d [31:0] $end
$var reg 5 9 rd_d [4:0] $end
$var reg 1 : reg_write_d $end
$var reg 2 ; res_src_d [1:0] $end
$var reg 5 < rs1_d [4:0] $end
$var reg 5 = rs2_d [4:0] $end
$scope module dut $end
$var wire 1 + adder_src_d $end
$var wire 4 > alu_control_d [3:0] $end
$var wire 32 ? alu_result_m [31:0] $end
$var wire 1 - alu_src_a_d $end
$var wire 1 . alu_src_b_d $end
$var wire 1 / branch_d $end
$var wire 3 @ funct3_d [14:12] $end
$var wire 3 A funct3_e [14:12] $end
$var wire 32 B imm_val_d [31:0] $end
$var wire 1 3 jump_d $end
$var wire 1 4 mem_write_d $end
$var wire 1 ( mem_write_e $end
$var wire 32 C pc_d [31:0] $end
$var wire 32 D pc_plus4_d [31:0] $end
$var wire 32 E pc_plus4_e [31:0] $end
$var wire 1 & pc_src_e $end
$var wire 32 F rd1_d [31:0] $end
$var wire 32 G rd2_d [31:0] $end
$var wire 5 H rd_d [4:0] $end
$var wire 4 I rd_e [3:0] $end
$var wire 1 : reg_write_d $end
$var wire 1 " reg_write_e $end
$var wire 2 J res_src_d [1:0] $end
$var wire 2 K res_src_e [1:0] $end
$var wire 32 L result_w [31:0] $end
$var wire 5 M rs1_d [4:0] $end
$var wire 5 N rs2_d [4:0] $end
$var wire 32 O write_data_e [31:0] $end
$var wire 32 P pc_target_e [31:0] $end
$var wire 32 Q pc_adder_a [31:0] $end
$var wire 32 R b_forward [31:0] $end
$var wire 32 S b_alu [31:0] $end
$var wire 32 T alu_result_e [31:0] $end
$var wire 32 U a_forward [31:0] $end
$var wire 32 V a_alu [31:0] $end
$scope module a_forward_mux $end
$var wire 32 W in1 [31:0] $end
$var wire 32 X in2 [31:0] $end
$var wire 32 Y in3 [31:0] $end
$var wire 2 Z sel [1:0] $end
$var reg 32 [ out [31:0] $end
$upscope $end
$scope module a_src_mux $end
$var wire 32 \ in1 [31:0] $end
$var wire 32 ] in2 [31:0] $end
$var wire 1 - sel $end
$var wire 32 ^ out [31:0] $end
$upscope $end
$scope module b_forward_mux $end
$var wire 32 _ in1 [31:0] $end
$var wire 32 ` in2 [31:0] $end
$var wire 32 a in3 [31:0] $end
$var wire 2 b sel [1:0] $end
$var reg 32 c out [31:0] $end
$upscope $end
$scope module b_src_mux $end
$var wire 32 d in1 [31:0] $end
$var wire 32 e in2 [31:0] $end
$var wire 1 . sel $end
$var wire 32 f out [31:0] $end
$upscope $end
$scope module main_alu $end
$var wire 32 g a [31:0] $end
$var wire 4 h alu_controls [3:0] $end
$var wire 32 i b [31:0] $end
$var wire 1 j funct3b0 $end
$var reg 32 k res [31:0] $end
$upscope $end
$scope module pc_target_adder $end
$var wire 32 l b [31:0] $end
$var wire 32 m res [31:0] $end
$var wire 32 n a [31:0] $end
$upscope $end
$scope module pc_target_mux $end
$var wire 32 o in1 [31:0] $end
$var wire 32 p in2 [31:0] $end
$var wire 1 + sel $end
$var wire 32 q out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 q
b10000 p
b0 o
b0 n
b100 m
b100 l
b110000 k
xj
b100000 i
b0 h
b10000 g
b100000 f
b100 e
b100000 d
b100000 c
b0 b
b0 a
b0 `
b100000 _
b10000 ^
b0 ]
b10000 \
b10000 [
b0 Z
b0 Y
b0 X
b10000 W
b10000 V
b10000 U
b110000 T
b100000 S
b100000 R
b0 Q
b100 P
bz O
b1 N
b0 M
bz L
b0 K
b0 J
bz I
b10 H
b100000 G
b10000 F
b100 E
b100 D
b0 C
b100 B
b0 A
b0 @
bz ?
b0 >
b1 =
b0 <
b0 ;
0:
b10 9
b100000 8
b10000 7
b100 6
b0 5
04
03
b100 2
b0 1
00
0/
0.
0-
b0 ,
0+
b110000 *
b0 )
0(
b100 '
0&
b100 %
b0 $
bz #
0"
bz !
$end
#5
10
#10
00
#15
10
#20
00
#25
10
#30
00
1/
#35
10
#40
00
#45
10
#50
1&
00
13
#55
10
#60
00
#65
10
#70
00
1(
14
#75
10
#80
00
#85
10
#90
b100 *
b100 T
b100 k
b100 S
b100 f
b100 i
b0 V
b0 ^
b0 g
00
1.
1-
#95
10
#100
00
#105
10
#110
00
1"
1:
#115
10
#120
00
#125
10
#130
00
#135
10
#140
00
