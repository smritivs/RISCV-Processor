$date
	Sun Jan 19 11:23:27 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module cpu_tb $end
$var wire 32 ! result [31:0] $end
$var reg 1 " clk $end
$var reg 1 # rst $end
$scope module dut $end
$var wire 1 " clk $end
$var wire 1 $ flush_e $end
$var wire 3 % funct3_d_i [2:0] $end
$var wire 3 & funct3_e_i [2:0] $end
$var wire 32 ' pc_d_i [31:0] $end
$var wire 32 ( pc_plus4_d_i [31:0] $end
$var wire 5 ) rd_d_i [4:0] $end
$var wire 5 * rd_e_i [4:0] $end
$var wire 5 + rd_w_i [4:0] $end
$var wire 1 , reg_write_e_i $end
$var wire 1 - reg_write_w_i $end
$var wire 1 . reset $end
$var wire 32 / result [31:0] $end
$var wire 5 0 rs1_d_i [4:0] $end
$var wire 5 1 rs2_d_i [4:0] $end
$var wire 1 # rst $end
$var wire 1 2 stall_f $end
$var wire 32 3 write_data_e_i [31:0] $end
$var wire 32 4 write_data_e_o [31:0] $end
$var wire 5 5 rs2_d_o [4:0] $end
$var wire 5 6 rs1_d_o [4:0] $end
$var wire 2 7 result_src_m_o [1:0] $end
$var wire 2 8 result_src_m_i [1:0] $end
$var wire 2 9 res_src_e_o [1:0] $end
$var wire 2 : res_src_e_i [1:0] $end
$var wire 2 ; res_src_d_o [1:0] $end
$var wire 2 < res_src_d_i [1:0] $end
$var wire 1 = reg_write_m_o $end
$var wire 1 > reg_write_m_i $end
$var wire 1 ? reg_write_e_o $end
$var wire 1 @ reg_write_d_o $end
$var wire 1 A reg_write_d_i $end
$var wire 32 B read_data_m_o [31:0] $end
$var wire 32 C read_data_m_i [31:0] $end
$var wire 5 D rd_m_o [4:0] $end
$var wire 5 E rd_m_i [4:0] $end
$var wire 5 F rd_e_o [4:0] $end
$var wire 5 G rd_d_o [4:0] $end
$var wire 32 H rd2_d_o [31:0] $end
$var wire 32 I rd2_d_i [31:0] $end
$var wire 32 J rd1_d_o [31:0] $end
$var wire 32 K rd1_d_i [31:0] $end
$var wire 32 L pc_target_e_i [31:0] $end
$var wire 1 M pc_src_e_i $end
$var wire 32 N pc_plus4_m_o [31:0] $end
$var wire 32 O pc_plus4_m_i [31:0] $end
$var wire 32 P pc_plus4_f_o [31:0] $end
$var wire 32 Q pc_plus4_f_i [31:0] $end
$var wire 32 R pc_plus4_e_o [31:0] $end
$var wire 32 S pc_plus4_e_i [31:0] $end
$var wire 32 T pc_plus4_d_o [31:0] $end
$var wire 32 U pc_f_o [31:0] $end
$var wire 32 V pc_f_i [31:0] $end
$var wire 32 W pc_d_o [31:0] $end
$var wire 1 X mem_write_e_o $end
$var wire 1 Y mem_write_e_i $end
$var wire 1 Z mem_write_d_o $end
$var wire 1 [ mem_write_d_i $end
$var wire 1 \ jump_d_o $end
$var wire 1 ] jump_d_i $end
$var wire 32 ^ instr_f_o [31:0] $end
$var wire 32 _ instr_f_i [31:0] $end
$var wire 32 ` imm_val_d_o [31:0] $end
$var wire 32 a imm_val_d_i [31:0] $end
$var wire 3 b funct3_e_o [2:0] $end
$var wire 3 c funct3_d_o [2:0] $end
$var wire 1 d branch_d_o $end
$var wire 1 e branch_d_i $end
$var wire 1 f alu_src_b_d_o $end
$var wire 1 g alu_src_b_d_i $end
$var wire 1 h alu_src_a_d_o $end
$var wire 1 i alu_src_a_d_i $end
$var wire 32 j alu_result_w_i [31:0] $end
$var wire 32 k alu_result_m_o [31:0] $end
$var wire 32 l alu_result_m_i [31:0] $end
$var wire 32 m alu_result_e_o [31:0] $end
$var wire 32 n alu_result_e_i [31:0] $end
$var wire 4 o alu_control_d_o [3:0] $end
$var wire 4 p alu_control_d_i [3:0] $end
$var wire 1 q adder_src_d_o $end
$var wire 1 r adder_src_d_i $end
$scope module de $end
$var wire 1 " clk $end
$var wire 1 $ clr $end
$var wire 1 s en $end
$var wire 3 t funct3_d_i [14:12] $end
$var wire 32 u pc_d_i [31:0] $end
$var wire 32 v pc_plus4_d_i [31:0] $end
$var wire 5 w rd_d_i [4:0] $end
$var wire 5 x rs1_d_i [4:0] $end
$var wire 5 y rs2_d_i [4:0] $end
$var wire 2 z res_src_d_i [1:0] $end
$var wire 1 A reg_write_d_i $end
$var wire 32 { rd2_d_i [31:0] $end
$var wire 32 | rd1_d_i [31:0] $end
$var wire 1 [ mem_write_d_i $end
$var wire 1 ] jump_d_i $end
$var wire 32 } imm_val_d_i [31:0] $end
$var wire 1 e branch_d_i $end
$var wire 1 g alu_src_b_d_i $end
$var wire 1 i alu_src_a_d_i $end
$var wire 4 ~ alu_control_d_i [3:0] $end
$var wire 1 r adder_src_d_i $end
$var reg 1 q adder_src_d_o $end
$var reg 4 !" alu_control_d_o [3:0] $end
$var reg 1 h alu_src_a_d_o $end
$var reg 1 f alu_src_b_d_o $end
$var reg 1 d branch_d_o $end
$var reg 3 "" funct3_d_o [14:12] $end
$var reg 32 #" imm_val_d_o [31:0] $end
$var reg 1 \ jump_d_o $end
$var reg 1 Z mem_write_d_o $end
$var reg 32 $" pc_d_o [31:0] $end
$var reg 32 %" pc_plus4_d_o [31:0] $end
$var reg 32 &" rd1_d_o [31:0] $end
$var reg 32 '" rd2_d_o [31:0] $end
$var reg 5 (" rd_d_o [4:0] $end
$var reg 1 @ reg_write_d_o $end
$var reg 2 )" res_src_d_o [1:0] $end
$var reg 5 *" rs1_d_o [4:0] $end
$var reg 5 +" rs2_d_o [4:0] $end
$upscope $end
$scope module decode_stage $end
$var wire 1 " clk $end
$var wire 32 ," pc_d [31:0] $end
$var wire 32 -" pc_plus4_d [31:0] $end
$var wire 5 ." rd_d [4:0] $end
$var wire 5 /" rd_w [4:0] $end
$var wire 1 - reg_write_w $end
$var wire 5 0" rs1_d [4:0] $end
$var wire 5 1" rs2_d [4:0] $end
$var wire 32 2" result_w [31:0] $end
$var wire 2 3" res_src_d [1:0] $end
$var wire 1 A reg_write_d $end
$var wire 32 4" rd2_d [31:0] $end
$var wire 32 5" rd1_d [31:0] $end
$var wire 32 6" pc_plus4_f [31:0] $end
$var wire 32 7" pc_f [31:0] $end
$var wire 1 [ mem_write_d $end
$var wire 1 ] jump_d $end
$var wire 32 8" instr_f [31:0] $end
$var wire 32 9" imm_val_d [31:0] $end
$var wire 3 :" imm_src_d [2:0] $end
$var wire 3 ;" funct3_d [2:0] $end
$var wire 1 e branch_d $end
$var wire 1 g alu_src_b_d $end
$var wire 1 i alu_src_a_d $end
$var wire 4 <" alu_control_d [3:0] $end
$var wire 1 r adder_src_d $end
$scope module cu $end
$var wire 4 =" alu_control_d [3:0] $end
$var wire 3 >" funct3 [14:12] $end
$var wire 1 ?" funct7b5 $end
$var wire 7 @" op [6:0] $end
$var wire 2 A" res_src_d [1:0] $end
$var wire 1 A reg_write_d $end
$var wire 1 [ mem_write_d $end
$var wire 1 ] jump_d $end
$var wire 3 B" imm_src_d [2:0] $end
$var wire 1 e branch_d $end
$var wire 1 g alu_src_b_d $end
$var wire 1 i alu_src_a_d $end
$var wire 1 r adder_src_d $end
$var reg 4 C" alu_controls [3:0] $end
$var reg 12 D" controls [11:0] $end
$upscope $end
$scope module imex $end
$var wire 3 E" imm_type [2:0] $end
$var wire 25 F" instr [31:7] $end
$var reg 32 G" imm_val [31:0] $end
$upscope $end
$scope module rf $end
$var wire 5 H" a1 [4:0] $end
$var wire 5 I" a2 [4:0] $end
$var wire 5 J" a3 [4:0] $end
$var wire 1 " clk $end
$var wire 1 - write_enable $end
$var wire 32 K" wd3 [31:0] $end
$var wire 32 L" rd2 [31:0] $end
$var wire 32 M" rd1 [31:0] $end
$var integer 32 N" i [31:0] $end
$upscope $end
$upscope $end
$scope module em $end
$var wire 1 " clk $end
$var wire 1 O" clr $end
$var wire 1 P" en $end
$var wire 3 Q" funct3_e_i [14:12] $end
$var wire 5 R" rd_e_i [4:0] $end
$var wire 1 , reg_write_e_i $end
$var wire 32 S" write_data_e_i [31:0] $end
$var wire 2 T" result_src_e_i [1:0] $end
$var wire 32 U" pc_plus4_e_i [31:0] $end
$var wire 1 Y mem_write_e_i $end
$var wire 32 V" alu_result_e_i [31:0] $end
$var reg 32 W" alu_result_e_o [31:0] $end
$var reg 3 X" funct3_e_o [14:12] $end
$var reg 1 X mem_write_e_o $end
$var reg 32 Y" pc_plus4_e_o [31:0] $end
$var reg 5 Z" rd_e_o [4:0] $end
$var reg 1 ? reg_write_e_o $end
$var reg 2 [" result_src_e_o [1:0] $end
$var reg 32 \" write_data_e_o [31:0] $end
$upscope $end
$scope module execute_stage $end
$var wire 1 r adder_src_d $end
$var wire 4 ]" alu_control_d [3:0] $end
$var wire 32 ^" alu_result_m [31:0] $end
$var wire 1 i alu_src_a_d $end
$var wire 1 g alu_src_b_d $end
$var wire 1 e branch_d $end
$var wire 3 _" funct3_d [14:12] $end
$var wire 3 `" funct3_e [14:12] $end
$var wire 32 a" imm_val_d [31:0] $end
$var wire 1 ] jump_d $end
$var wire 1 [ mem_write_d $end
$var wire 1 Y mem_write_e $end
$var wire 32 b" pc_d [31:0] $end
$var wire 32 c" pc_plus4_d [31:0] $end
$var wire 32 d" pc_plus4_e [31:0] $end
$var wire 1 M pc_src_e $end
$var wire 32 e" rd1_d [31:0] $end
$var wire 32 f" rd2_d [31:0] $end
$var wire 5 g" rd_d [4:0] $end
$var wire 4 h" rd_e [3:0] $end
$var wire 1 A reg_write_d $end
$var wire 1 , reg_write_e $end
$var wire 2 i" res_src_d [1:0] $end
$var wire 2 j" res_src_e [1:0] $end
$var wire 32 k" result_w [31:0] $end
$var wire 5 l" rs1_d [4:0] $end
$var wire 5 m" rs2_d [4:0] $end
$var wire 32 n" write_data_e [31:0] $end
$var wire 32 o" pc_target_e [31:0] $end
$var wire 32 p" pc_adder_a [31:0] $end
$var wire 32 q" b_forward [31:0] $end
$var wire 32 r" b_alu [31:0] $end
$var wire 32 s" alu_result_e [31:0] $end
$var wire 32 t" a_forward [31:0] $end
$var wire 32 u" a_alu [31:0] $end
$scope module a_forward_mux $end
$var wire 32 v" in1 [31:0] $end
$var wire 32 w" in2 [31:0] $end
$var wire 32 x" in3 [31:0] $end
$var wire 2 y" sel [1:0] $end
$var reg 32 z" out [31:0] $end
$upscope $end
$scope module a_src_mux $end
$var wire 32 {" in1 [31:0] $end
$var wire 32 |" in2 [31:0] $end
$var wire 1 i sel $end
$var wire 32 }" out [31:0] $end
$upscope $end
$scope module b_forward_mux $end
$var wire 32 ~" in1 [31:0] $end
$var wire 32 !# in2 [31:0] $end
$var wire 32 "# in3 [31:0] $end
$var wire 2 ## sel [1:0] $end
$var reg 32 $# out [31:0] $end
$upscope $end
$scope module b_src_mux $end
$var wire 32 %# in1 [31:0] $end
$var wire 32 &# in2 [31:0] $end
$var wire 1 g sel $end
$var wire 32 '# out [31:0] $end
$upscope $end
$scope module main_alu $end
$var wire 32 (# a [31:0] $end
$var wire 4 )# alu_controls [3:0] $end
$var wire 32 *# b [31:0] $end
$var wire 1 +# funct3b0 $end
$var reg 32 ,# res [31:0] $end
$upscope $end
$scope module pc_target_adder $end
$var wire 32 -# b [31:0] $end
$var wire 32 .# res [31:0] $end
$var wire 32 /# a [31:0] $end
$upscope $end
$scope module pc_target_mux $end
$var wire 32 0# in1 [31:0] $end
$var wire 32 1# in2 [31:0] $end
$var wire 1 r sel $end
$var wire 32 2# out [31:0] $end
$upscope $end
$upscope $end
$scope module fd $end
$var wire 1 " clk $end
$var wire 1 # clr $end
$var wire 1 2 en $end
$var wire 32 3# pc_plus4_f_i [31:0] $end
$var wire 32 4# pc_f_i [31:0] $end
$var wire 32 5# instr_f_i [31:0] $end
$var reg 32 6# instr_f_o [31:0] $end
$var reg 32 7# pc_f_o [31:0] $end
$var reg 32 8# pc_plus4_f_o [31:0] $end
$upscope $end
$scope module fetch_stage $end
$var wire 1 " clk $end
$var wire 1 2 en $end
$var wire 32 9# pc_f [31:0] $end
$var wire 32 :# pc_plus4_f [31:0] $end
$var wire 1 M pc_src_e $end
$var wire 32 ;# pc_target_e [31:0] $end
$var wire 1 . rst $end
$var wire 1 <# stall_f $end
$var wire 32 =# pc_plus4 [31:0] $end
$var wire 32 ># pc_mux_res [31:0] $end
$var wire 32 ?# pc [31:0] $end
$var wire 32 @# instr_f [31:0] $end
$scope module i_mem $end
$var wire 32 A# instr [31:0] $end
$var wire 32 B# instr_addr [31:0] $end
$upscope $end
$scope module pc_ff $end
$var wire 1 " clk $end
$var wire 1 <# en $end
$var wire 1 . rst $end
$var wire 32 C# din [31:0] $end
$var reg 32 D# dout [31:0] $end
$upscope $end
$scope module pc_mux $end
$var wire 32 E# in2 [31:0] $end
$var wire 1 M sel $end
$var wire 32 F# out [31:0] $end
$var wire 32 G# in1 [31:0] $end
$upscope $end
$scope module pc_plus4_adder $end
$var wire 32 H# a [31:0] $end
$var wire 32 I# b [31:0] $end
$var wire 32 J# res [31:0] $end
$upscope $end
$upscope $end
$scope module memory_stage $end
$var wire 32 K# alu_result_e [31:0] $end
$var wire 32 L# alu_result_m [31:0] $end
$var wire 1 " clk $end
$var wire 3 M# funct3_e [14:12] $end
$var wire 1 X mem_write_e $end
$var wire 32 N# pc_plus4_e [31:0] $end
$var wire 32 O# pc_plus4_m [31:0] $end
$var wire 5 P# rd_e [4:0] $end
$var wire 5 Q# rd_m [4:0] $end
$var wire 1 ? reg_write_e $end
$var wire 1 > reg_write_m $end
$var wire 2 R# result_src_e [1:0] $end
$var wire 2 S# result_src_m [1:0] $end
$var wire 32 T# write_data_e [31:0] $end
$var wire 32 U# read_data_m [31:0] $end
$scope module dm $end
$var wire 1 " clk $end
$var wire 32 V# data_mem_addr [31:0] $end
$var wire 3 W# funct3 [14:12] $end
$var wire 1 X mem_write_e $end
$var wire 32 X# word [31:0] $end
$var wire 32 Y# write_data_e [31:0] $end
$var wire 32 Z# word_addr [31:0] $end
$var reg 32 [# read_data_m [31:0] $end
$var integer 32 \# i [31:0] $end
$upscope $end
$upscope $end
$scope module mw $end
$var wire 32 ]# alu_result_m_i [31:0] $end
$var wire 1 " clk $end
$var wire 1 ^# clr $end
$var wire 1 _# en $end
$var wire 32 `# pc_plus4_m_i [31:0] $end
$var wire 5 a# rd_m_i [4:0] $end
$var wire 32 b# read_data_m_i [31:0] $end
$var wire 1 > reg_write_m_i $end
$var wire 2 c# result_src_m_i [1:0] $end
$var reg 32 d# alu_result_m_o [31:0] $end
$var reg 32 e# pc_plus4_m_o [31:0] $end
$var reg 5 f# rd_m_o [4:0] $end
$var reg 32 g# read_data_m_o [31:0] $end
$var reg 1 = reg_write_m_o $end
$var reg 2 h# result_src_m_o [1:0] $end
$upscope $end
$scope module writeback_stage $end
$var wire 32 i# alu_result_m [31:0] $end
$var wire 32 j# pc_plus4_m [31:0] $end
$var wire 5 k# rd_m [4:0] $end
$var wire 5 l# rd_w [4:0] $end
$var wire 32 m# read_data_m [31:0] $end
$var wire 1 = reg_write_m $end
$var wire 1 - reg_write_w $end
$var wire 2 n# result_src_m [1:0] $end
$var wire 32 o# result_w [31:0] $end
$scope module result_mux $end
$var wire 32 p# in1 [31:0] $end
$var wire 32 q# in2 [31:0] $end
$var wire 32 r# in3 [31:0] $end
$var wire 2 s# sel [1:0] $end
$var reg 32 t# out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx t#
bx s#
bx r#
bx q#
bx p#
bx o#
bx n#
bx m#
bz l#
bx k#
bx j#
bx i#
bx h#
bx g#
bx f#
bx e#
bx d#
bx c#
bx b#
bx a#
bx `#
0_#
0^#
bx ]#
b1000000 \#
bx [#
bx Z#
bx Y#
bx X#
bx W#
bx V#
bx U#
bx T#
bx S#
bx R#
bx Q#
bx P#
bx O#
bx N#
bx M#
bx L#
bx K#
bx J#
b100 I#
bx H#
bx G#
bx F#
bx E#
bx D#
bx C#
bx B#
bx A#
bx @#
bx ?#
bx >#
bx =#
z<#
bx ;#
bx :#
bx 9#
bx 8#
bx 7#
bx 6#
bx 5#
bx 4#
bx 3#
bx 2#
bx 1#
bz 0#
bx /#
bx .#
bx -#
bx ,#
x+#
bx *#
bx )#
bx (#
bx '#
bx &#
bx %#
bx $#
b0 ##
b0 "#
b0 !#
bx ~"
bx }"
bz |"
bx {"
bx z"
b0 y"
b0 x"
b0 w"
bx v"
bx u"
bx t"
bx s"
bx r"
bx q"
bx p"
bx o"
bz n"
bz m"
bz l"
bz k"
bx j"
bx i"
bz h"
bz g"
bx f"
bx e"
bz d"
bz c"
bz b"
bx a"
bz `"
bz _"
bz ^"
bx ]"
bx \"
bx ["
bx Z"
bx Y"
bx X"
bx W"
bx V"
bz U"
bx T"
bz S"
bz R"
bz Q"
0P"
0O"
b100000 N"
bx M"
bx L"
bx K"
bz J"
bx I"
bx H"
bx G"
bx F"
bx E"
bx D"
bx C"
bx B"
bx A"
bx @"
x?"
bx >"
bx ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bz 1"
bz 0"
bz /"
bz ."
bx -"
bx ,"
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bz y
bz x
bz w
bz v
bz u
bz t
0s
xr
xq
bx p
bx o
bx n
bx m
bx l
bx k
bx j
xi
xh
xg
xf
xe
xd
bx c
bx b
bx a
bx `
bx _
bx ^
x]
x\
x[
xZ
xY
xX
bx W
bx V
bx U
bx T
bz S
bx R
bx Q
bx P
bx O
bx N
xM
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
xA
x@
x?
x>
x=
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bz 3
z2
bz 1
bz 0
bx /
z.
z-
x,
bz +
bz *
bz )
bz (
bz '
bz &
bz %
z$
1#
0"
bx !
$end
#5
bz T
bz %"
bz G
bz ("
bz 5
bz +"
bz 6
bz *"
bz W
bz $"
bz c
bz ""
bz O
bz O#
bz `#
bz R
bz Y"
bz N#
bz E
bz Q#
bz a#
bz F
bz Z"
bz P#
bz 4
bz \"
bz T#
bz Y#
bz b
bz X"
bz M#
bz W#
0#
1"
#10
0"
#15
b0 !
b0 /
b0 j
b0 2"
b0 K"
b0 o#
b0 t#
bz N
bz e#
bz j#
bz r#
bz D
bz f#
bz k#
1"
#20
0"
#25
1"
#30
0"
#35
1"
#40
0"
#45
1"
#50
0"
#55
1"
#60
0"
#65
1"
#70
0"
#75
1"
#80
0"
#85
1"
#90
0"
#95
1"
#100
0"
#105
1"
