$date
	Thu Feb  6 07:38:42 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module cpu_tb $end
$var wire 32 ! result [31:0] $end
$var wire 32 " pcw [31:0] $end
$var reg 1 # clk $end
$var reg 1 $ rst $end
$scope module dut $end
$var wire 1 # clk $end
$var wire 32 % pc_plus4_m_o [31:0] $end
$var wire 32 & result [31:0] $end
$var wire 1 $ rst $end
$var wire 1 ' stall_f $end
$var wire 32 ( write_data_e_i [31:0] $end
$var wire 5 ) rs2_d_o [4:0] $end
$var wire 5 * rs2_d_i [4:0] $end
$var wire 5 + rs1_d_o [4:0] $end
$var wire 5 , rs1_d_i [4:0] $end
$var wire 2 - result_src_m_i [1:0] $end
$var wire 2 . res_src_e_i [1:0] $end
$var wire 2 / res_src_d_o [1:0] $end
$var wire 2 0 res_src_d_i [1:0] $end
$var wire 1 1 reg_write_w_i $end
$var wire 1 2 reg_write_m_i $end
$var wire 1 3 reg_write_e_i $end
$var wire 1 4 reg_write_d_o $end
$var wire 1 5 reg_write_d_i $end
$var wire 32 6 read_data_m_i [31:0] $end
$var wire 5 7 rd_w_i [4:0] $end
$var wire 5 8 rd_m_i [4:0] $end
$var wire 5 9 rd_e_i [4:0] $end
$var wire 5 : rd_d_o [4:0] $end
$var wire 5 ; rd_d_i [4:0] $end
$var wire 32 < rd2_d_o [31:0] $end
$var wire 32 = rd2_d_i [31:0] $end
$var wire 32 > rd1_d_o [31:0] $end
$var wire 32 ? rd1_d_i [31:0] $end
$var wire 32 @ pcw [31:0] $end
$var wire 32 A pc_target_e_i [31:0] $end
$var wire 1 B pc_src_e_i $end
$var wire 32 C pc_plus4_m_i [31:0] $end
$var wire 32 D pc_plus4_f_o [31:0] $end
$var wire 32 E pc_plus4_f_i [31:0] $end
$var wire 32 F pc_plus4_e_i [31:0] $end
$var wire 32 G pc_plus4_d_o [31:0] $end
$var wire 32 H pc_plus4_d_i [31:0] $end
$var wire 32 I pc_f_o [31:0] $end
$var wire 32 J pc_f_i [31:0] $end
$var wire 32 K pc_d_o [31:0] $end
$var wire 32 L pc_d_i [31:0] $end
$var wire 1 M mem_write_e_i $end
$var wire 1 N mem_write_d_o $end
$var wire 1 O mem_write_d_i $end
$var wire 1 P jump_d_o $end
$var wire 1 Q jump_d_i $end
$var wire 32 R instr_f_o [31:0] $end
$var wire 32 S instr_f_i [31:0] $end
$var wire 32 T imm_val_d_o [31:0] $end
$var wire 32 U imm_val_d_i [31:0] $end
$var wire 3 V funct3_e_i [2:0] $end
$var wire 3 W funct3_d_o [2:0] $end
$var wire 3 X funct3_d_i [2:0] $end
$var wire 1 Y flush_e $end
$var wire 1 Z flush_d $end
$var wire 1 [ branch_d_o $end
$var wire 1 \ branch_d_i $end
$var wire 1 ] alu_src_b_d_o $end
$var wire 1 ^ alu_src_b_d_i $end
$var wire 1 _ alu_src_a_d_o $end
$var wire 1 ` alu_src_a_d_i $end
$var wire 32 a alu_result_w_i [31:0] $end
$var wire 32 b alu_result_m_i [31:0] $end
$var wire 32 c alu_result_e_i [31:0] $end
$var wire 4 d alu_control_d_o [3:0] $end
$var wire 4 e alu_control_d_i [3:0] $end
$var wire 1 f adder_src_d_o $end
$var wire 1 g adder_src_d_i $end
$scope module de $end
$var wire 1 # clk $end
$var wire 1 h clr $end
$var wire 1 i en $end
$var wire 5 j rs2_d_i [4:0] $end
$var wire 5 k rs1_d_i [4:0] $end
$var wire 2 l res_src_d_i [1:0] $end
$var wire 1 5 reg_write_d_i $end
$var wire 5 m rd_d_i [4:0] $end
$var wire 32 n rd2_d_i [31:0] $end
$var wire 32 o rd1_d_i [31:0] $end
$var wire 32 p pc_plus4_d_i [31:0] $end
$var wire 32 q pc_d_i [31:0] $end
$var wire 1 O mem_write_d_i $end
$var wire 1 Q jump_d_i $end
$var wire 32 r imm_val_d_i [31:0] $end
$var wire 3 s funct3_d_i [14:12] $end
$var wire 1 \ branch_d_i $end
$var wire 1 ^ alu_src_b_d_i $end
$var wire 1 ` alu_src_a_d_i $end
$var wire 4 t alu_control_d_i [3:0] $end
$var wire 1 g adder_src_d_i $end
$var reg 1 f adder_src_d_o $end
$var reg 4 u alu_control_d_o [3:0] $end
$var reg 1 _ alu_src_a_d_o $end
$var reg 1 ] alu_src_b_d_o $end
$var reg 1 [ branch_d_o $end
$var reg 3 v funct3_d_o [14:12] $end
$var reg 32 w imm_val_d_o [31:0] $end
$var reg 1 P jump_d_o $end
$var reg 1 N mem_write_d_o $end
$var reg 32 x pc_d_o [31:0] $end
$var reg 32 y pc_plus4_d_o [31:0] $end
$var reg 32 z rd1_d_o [31:0] $end
$var reg 32 { rd2_d_o [31:0] $end
$var reg 5 | rd_d_o [4:0] $end
$var reg 1 4 reg_write_d_o $end
$var reg 2 } res_src_d_o [1:0] $end
$var reg 5 ~ rs1_d_o [4:0] $end
$var reg 5 !" rs2_d_o [4:0] $end
$upscope $end
$scope module decode_stage $end
$var wire 1 # clk $end
$var wire 32 "" pc_d [31:0] $end
$var wire 32 #" pc_plus4_d [31:0] $end
$var wire 5 $" rs2_d [4:0] $end
$var wire 5 %" rs1_d [4:0] $end
$var wire 32 &" result_w [31:0] $end
$var wire 2 '" res_src_d [1:0] $end
$var wire 1 1 reg_write_w $end
$var wire 1 5 reg_write_d $end
$var wire 5 (" rd_w [4:0] $end
$var wire 5 )" rd_d [4:0] $end
$var wire 32 *" rd2_d [31:0] $end
$var wire 32 +" rd1_d [31:0] $end
$var wire 32 ," pc_plus4_f [31:0] $end
$var wire 32 -" pc_f [31:0] $end
$var wire 1 O mem_write_d $end
$var wire 1 Q jump_d $end
$var wire 32 ." instr_f [31:0] $end
$var wire 32 /" imm_val_d [31:0] $end
$var wire 3 0" imm_src_d [2:0] $end
$var wire 3 1" funct3_d [2:0] $end
$var wire 1 \ branch_d $end
$var wire 1 ^ alu_src_b_d $end
$var wire 1 ` alu_src_a_d $end
$var wire 4 2" alu_control_d [3:0] $end
$var wire 1 g adder_src_d $end
$scope module cu $end
$var wire 4 3" alu_control_d [3:0] $end
$var wire 3 4" funct3 [14:12] $end
$var wire 1 5" funct7b5 $end
$var wire 7 6" op [6:0] $end
$var wire 2 7" res_src_d [1:0] $end
$var wire 1 5 reg_write_d $end
$var wire 1 O mem_write_d $end
$var wire 1 Q jump_d $end
$var wire 3 8" imm_src_d [2:0] $end
$var wire 1 \ branch_d $end
$var wire 1 ^ alu_src_b_d $end
$var wire 1 ` alu_src_a_d $end
$var wire 1 g adder_src_d $end
$var reg 4 9" alu_controls [3:0] $end
$var reg 12 :" controls [11:0] $end
$upscope $end
$scope module imex $end
$var wire 3 ;" imm_type [2:0] $end
$var wire 25 <" instr [31:7] $end
$var reg 32 =" imm_val [31:0] $end
$upscope $end
$scope module rf $end
$var wire 5 >" a1 [4:0] $end
$var wire 5 ?" a2 [4:0] $end
$var wire 1 # clk $end
$var wire 1 1 write_enable $end
$var wire 32 @" wd3 [31:0] $end
$var wire 32 A" rd2 [31:0] $end
$var wire 32 B" rd1 [31:0] $end
$var wire 5 C" a3 [4:0] $end
$var integer 32 D" i [31:0] $end
$upscope $end
$upscope $end
$scope module execute_stage $end
$var wire 1 f adder_src_d $end
$var wire 4 E" alu_control_d [3:0] $end
$var wire 1 _ alu_src_a_d $end
$var wire 1 ] alu_src_b_d $end
$var wire 1 [ branch_d $end
$var wire 2 F" forward_a_e [1:0] $end
$var wire 2 G" forward_b_e [1:0] $end
$var wire 3 H" funct3_d [14:12] $end
$var wire 3 I" funct3_e [14:12] $end
$var wire 32 J" imm_val_d [31:0] $end
$var wire 1 P jump_d $end
$var wire 1 N mem_write_d $end
$var wire 1 M mem_write_e $end
$var wire 32 K" pc_d [31:0] $end
$var wire 32 L" pc_plus4_d [31:0] $end
$var wire 32 M" pc_plus4_e [31:0] $end
$var wire 1 B pc_src_e $end
$var wire 32 N" rd1_d [31:0] $end
$var wire 32 O" rd2_d [31:0] $end
$var wire 5 P" rd_d [4:0] $end
$var wire 5 Q" rd_e [4:0] $end
$var wire 1 4 reg_write_d $end
$var wire 1 3 reg_write_e $end
$var wire 2 R" res_src_d [1:0] $end
$var wire 2 S" res_src_e [1:0] $end
$var wire 5 T" rs1_d [4:0] $end
$var wire 5 U" rs2_d [4:0] $end
$var wire 32 V" write_data_e [31:0] $end
$var wire 32 W" pc_target_e [31:0] $end
$var wire 32 X" pc_adder_a [31:0] $end
$var wire 32 Y" b_forward [31:0] $end
$var wire 32 Z" b_alu [31:0] $end
$var wire 32 [" alu_result_w [31:0] $end
$var wire 32 \" alu_result_m [31:0] $end
$var wire 32 ]" alu_result_e [31:0] $end
$var wire 32 ^" a_forward [31:0] $end
$var wire 32 _" a_alu [31:0] $end
$scope module a_forward_mux $end
$var wire 32 `" in1 [31:0] $end
$var wire 2 a" sel [1:0] $end
$var wire 32 b" in3 [31:0] $end
$var wire 32 c" in2 [31:0] $end
$var reg 32 d" out [31:0] $end
$upscope $end
$scope module a_src_mux $end
$var wire 32 e" in1 [31:0] $end
$var wire 32 f" in2 [31:0] $end
$var wire 1 _ sel $end
$var wire 32 g" out [31:0] $end
$upscope $end
$scope module b_forward_mux $end
$var wire 32 h" in1 [31:0] $end
$var wire 2 i" sel [1:0] $end
$var wire 32 j" in3 [31:0] $end
$var wire 32 k" in2 [31:0] $end
$var reg 32 l" out [31:0] $end
$upscope $end
$scope module b_src_mux $end
$var wire 32 m" in1 [31:0] $end
$var wire 32 n" in2 [31:0] $end
$var wire 1 ] sel $end
$var wire 32 o" out [31:0] $end
$upscope $end
$scope module main_alu $end
$var wire 32 p" a [31:0] $end
$var wire 4 q" alu_controls [3:0] $end
$var wire 32 r" b [31:0] $end
$var wire 1 s" funct3b0 $end
$var reg 32 t" res [31:0] $end
$upscope $end
$scope module pc_target_adder $end
$var wire 32 u" b [31:0] $end
$var wire 32 v" res [31:0] $end
$var wire 32 w" a [31:0] $end
$upscope $end
$scope module pc_target_mux $end
$var wire 32 x" in1 [31:0] $end
$var wire 32 y" in2 [31:0] $end
$var wire 1 f sel $end
$var wire 32 z" out [31:0] $end
$upscope $end
$upscope $end
$scope module fd $end
$var wire 1 # clk $end
$var wire 1 $ clr $end
$var wire 1 ' en $end
$var wire 32 {" pc_plus4_f_i [31:0] $end
$var wire 32 |" pc_f_i [31:0] $end
$var wire 32 }" instr_f_i [31:0] $end
$var reg 32 ~" instr_f_o [31:0] $end
$var reg 32 !# pc_f_o [31:0] $end
$var reg 32 "# pc_plus4_f_o [31:0] $end
$upscope $end
$scope module fetch_stage $end
$var wire 1 # clk $end
$var wire 1 ' en $end
$var wire 32 ## pc_f [31:0] $end
$var wire 32 $# pc_plus4_f [31:0] $end
$var wire 1 B pc_src_e $end
$var wire 32 %# pc_target_e [31:0] $end
$var wire 1 $ rst $end
$var wire 32 &# pc_plus4 [31:0] $end
$var wire 32 '# pc_mux_res [31:0] $end
$var wire 32 (# pc [31:0] $end
$var wire 32 )# instr_f [31:0] $end
$scope module i_mem $end
$var wire 32 *# instr [31:0] $end
$var wire 32 +# instr_addr [31:0] $end
$upscope $end
$scope module pc_ff $end
$var wire 1 # clk $end
$var wire 1 ' en $end
$var wire 1 $ rst $end
$var wire 32 ,# din [31:0] $end
$var reg 32 -# dout [31:0] $end
$upscope $end
$scope module pc_mux $end
$var wire 32 .# in2 [31:0] $end
$var wire 1 B sel $end
$var wire 32 /# out [31:0] $end
$var wire 32 0# in1 [31:0] $end
$upscope $end
$scope module pc_plus4_adder $end
$var wire 32 1# a [31:0] $end
$var wire 32 2# b [31:0] $end
$var wire 32 3# res [31:0] $end
$upscope $end
$upscope $end
$scope module hazard_unit $end
$var wire 1 Z flush_d $end
$var wire 1 Y flush_e $end
$var wire 1 B pc_src_e $end
$upscope $end
$scope module memory_stage $end
$var wire 32 4# alu_result_e [31:0] $end
$var wire 32 5# alu_result_m [31:0] $end
$var wire 1 # clk $end
$var wire 3 6# funct3_e [14:12] $end
$var wire 1 M mem_write_e $end
$var wire 32 7# pc_plus4_e [31:0] $end
$var wire 32 8# pc_plus4_m [31:0] $end
$var wire 5 9# rd_e [4:0] $end
$var wire 5 :# rd_m [4:0] $end
$var wire 1 3 reg_write_e $end
$var wire 1 2 reg_write_m $end
$var wire 2 ;# result_src_e [1:0] $end
$var wire 2 <# result_src_m [1:0] $end
$var wire 32 =# write_data_e [31:0] $end
$var wire 32 ># read_data_m [31:0] $end
$scope module dm $end
$var wire 1 # clk $end
$var wire 32 ?# data_mem_addr [31:0] $end
$var wire 3 @# funct3 [14:12] $end
$var wire 1 M mem_write_e $end
$var wire 32 A# word [31:0] $end
$var wire 32 B# write_data_e [31:0] $end
$var wire 32 C# word_addr [31:0] $end
$var reg 32 D# read_data_m [31:0] $end
$var integer 32 E# i [31:0] $end
$upscope $end
$upscope $end
$scope module writeback_stage $end
$var wire 32 F# alu_result_m [31:0] $end
$var wire 32 G# pc_plus4_m [31:0] $end
$var wire 5 H# rd_m [4:0] $end
$var wire 5 I# rd_w [4:0] $end
$var wire 32 J# read_data_m [31:0] $end
$var wire 1 2 reg_write_m $end
$var wire 1 1 reg_write_w $end
$var wire 2 K# result_src_m [1:0] $end
$var wire 32 L# result_w [31:0] $end
$scope module result_mux $end
$var wire 32 M# in1 [31:0] $end
$var wire 32 N# in2 [31:0] $end
$var wire 32 O# in3 [31:0] $end
$var wire 2 P# sel [1:0] $end
$var reg 32 Q# out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx Q#
bx P#
bx O#
bx N#
bx M#
bx L#
bx K#
bx J#
bx I#
bx H#
bx G#
bx F#
b1000000 E#
bx D#
bx C#
bx B#
bx A#
bx @#
bx ?#
bx >#
bx =#
bx <#
bx ;#
bx :#
bx 9#
bx 8#
bx 7#
bx 6#
bx 5#
bx 4#
b100 3#
b100 2#
b0 1#
b100 0#
bx /#
bx .#
b0 -#
bx ,#
b0 +#
b100000000000010010011 *#
b100000000000010010011 )#
b0 (#
bx '#
b100 &#
bx %#
b100 $#
b0 ##
bx "#
bx !#
bx ~"
b100000000000010010011 }"
b0 |"
b100 {"
bx z"
bx y"
bx x"
bx w"
bx v"
bx u"
bx t"
xs"
bx r"
bx q"
bx p"
bx o"
bx n"
bx m"
bx l"
bx k"
bx j"
b0 i"
bx h"
bx g"
bx f"
bx e"
bx d"
bx c"
bx b"
b0 a"
bx `"
bx _"
bx ^"
bx ]"
bx \"
bx ["
bx Z"
bx Y"
bx X"
bx W"
bx V"
bx U"
bx T"
bx S"
bx R"
bx Q"
bx P"
bx O"
bx N"
bx M"
bx L"
bx K"
bx J"
bx I"
bx H"
b0 G"
b0 F"
bx E"
b100000 D"
bx C"
bx B"
bx A"
bx @"
bx ?"
bx >"
bx ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
x5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
bx j
0i
1h
xg
xf
bx e
bx d
bx c
bx b
bx a
x`
x_
x^
x]
x\
x[
xZ
xY
bx X
bx W
bx V
bx U
bx T
b100000000000010010011 S
bx R
xQ
xP
xO
xN
xM
bx L
bx K
b0 J
bx I
bx H
bx G
bx F
b100 E
bx D
bx C
xB
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
x5
x4
x3
x2
x1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
z'
bx &
bz %
1$
0#
bx "
bx !
$end
#5000
b0 !
b0 &
b0 a
b0 &"
b0 @"
b0 ["
b0 b"
b0 j"
b0 L#
b0 Q#
b0 6
b0 >#
b0 D#
b0 J#
b0 N#
b0 A#
b0 C#
b0 b
b0 \"
b0 c"
b0 k"
b0 5#
b0 F#
b0 M#
b0 c
b0 ]"
b0 t"
b0 4#
b0 ?#
b0 Z"
b0 o"
b0 r"
b0 _"
b0 g"
b0 p"
b100 '#
b100 ,#
b100 /#
0Z
0Y
0B
b0 (
b0 V"
b0 =#
b0 B#
b0 Y"
b0 l"
b0 m"
b0 ^"
b0 d"
b0 e"
b0 A
b0 W"
b0 v"
b0 %#
b0 .#
b0 X"
b0 w"
b0 z"
0s"
b0 C
b0 8#
b0 G#
b0 O#
b0 F
b0 M"
b0 7#
b0 G
b0 y
b0 L"
b0 T
b0 w
b0 J"
b0 n"
b0 u"
b0 7
b0 ("
b0 C"
b0 I#
b0 8
b0 :#
b0 H#
b0 9
b0 Q"
b0 9#
b0 :
b0 |
b0 P"
b0 )
b0 !"
b0 U"
b0 +
b0 ~
b0 T"
b0 K
b0 x
b0 K"
b0 f"
b0 x"
b0 <
b0 {
b0 O"
b0 h"
b0 >
b0 z
b0 N"
b0 `"
b0 y"
0f
0_
0]
b0 V
b0 I"
b0 6#
b0 @#
b0 W
b0 v
b0 H"
b0 d
b0 u
b0 E"
b0 q"
0[
0P
0M
0N
b0 -
b0 <#
b0 K#
b0 P#
b0 .
b0 S"
b0 ;#
b0 /
b0 }
b0 R"
01
02
03
04
0h
0$
1#
#10000
0#
#15000
bx '#
bx ,#
bx /#
xh
bx (
bx V"
bx =#
bx B#
bx Y"
bx l"
bx m"
bx ^"
bx d"
bx e"
bx X"
bx w"
bx z"
bx _"
bx g"
bx p"
bx Z"
bx o"
bx r"
xs"
xZ
xY
xB
bx C
bx 8#
bx G#
bx O#
bx F
bx M"
bx 7#
bx G
bx y
bx L"
bx A
bx W"
bx v"
bx %#
bx .#
bx T
bx w
bx J"
bx n"
bx u"
bx 7
bx ("
bx C"
bx I#
bx 8
bx :#
bx H#
bx 9
bx Q"
bx 9#
bx :
bx |
bx P"
bx )
bx !"
bx U"
bx +
bx ~
bx T"
bx K
bx x
bx K"
bx f"
bx x"
bx <
bx {
bx O"
bx h"
bx >
bx z
bx N"
bx `"
bx y"
xf
x_
x]
bx V
bx I"
bx 6#
bx @#
bx W
bx v
bx H"
bx d
bx u
bx E"
bx q"
x[
xP
xM
xN
bx -
bx <#
bx K#
bx P#
bx .
bx S"
bx ;#
bx /
bx }
bx R"
x1
x2
x3
x4
1#
#20000
0#
#25000
1#
#30000
0#
#35000
1#
#40000
0#
#45000
1#
#50000
0#
#55000
1#
#60000
0#
#65000
1#
#70000
0#
#75000
1#
#80000
0#
#85000
1#
#90000
0#
#95000
1#
#100000
0#
#105000
1#
#110000
0#
#115000
1#
#120000
0#
#125000
1#
#130000
0#
#135000
1#
#140000
0#
#145000
1#
#150000
0#
#155000
1#
#160000
0#
#165000
1#
#170000
0#
#175000
1#
#180000
0#
#185000
1#
#190000
0#
#195000
1#
#200000
0#
#205000
1#
#210000
0#
#215000
1#
#220000
0#
#225000
1#
#230000
0#
#235000
1#
#240000
0#
#245000
1#
#250000
0#
#255000
1#
#260000
0#
#265000
1#
#270000
0#
#275000
1#
#280000
0#
#285000
1#
#290000
0#
#295000
1#
#300000
0#
#305000
1#
#310000
0#
#315000
1#
#320000
0#
#325000
1#
#330000
0#
#335000
1#
#340000
0#
#345000
1#
#350000
0#
#355000
1#
#360000
0#
#365000
1#
#370000
0#
#375000
1#
#380000
0#
#385000
1#
#390000
0#
#395000
1#
#400000
0#
#405000
1#
#410000
0#
#415000
1#
#420000
0#
#425000
1#
#430000
0#
#435000
1#
#440000
0#
#445000
1#
#450000
0#
#455000
1#
#460000
0#
#465000
1#
#470000
0#
#475000
1#
#480000
0#
#485000
1#
#490000
0#
#495000
1#
#500000
0#
#505000
1#
#510000
0#
#515000
1#
#520000
0#
#525000
1#
#530000
0#
#535000
1#
#540000
0#
#545000
1#
#550000
0#
#555000
1#
#560000
0#
#565000
1#
#570000
0#
#575000
1#
#580000
0#
#585000
1#
#590000
0#
#595000
1#
#600000
0#
#605000
1#
#610000
0#
#615000
1#
#620000
0#
#625000
1#
#630000
0#
#635000
1#
#640000
0#
#645000
1#
#650000
0#
#655000
1#
#660000
0#
#665000
1#
#670000
0#
#675000
1#
#680000
0#
#685000
1#
#690000
0#
#695000
1#
#700000
0#
#705000
1#
#710000
0#
#715000
1#
#720000
0#
#725000
1#
#730000
0#
#735000
1#
#740000
0#
#745000
1#
#750000
0#
#755000
1#
#760000
0#
#765000
1#
#770000
0#
#775000
1#
#780000
0#
#785000
1#
#790000
0#
#795000
1#
#800000
0#
#805000
1#
#810000
0#
#815000
1#
#820000
0#
#825000
1#
#830000
0#
#835000
1#
#840000
0#
#845000
1#
#850000
0#
#855000
1#
#860000
0#
#865000
1#
#870000
0#
#875000
1#
#880000
0#
#885000
1#
#890000
0#
#895000
1#
#900000
0#
#905000
1#
#910000
0#
#915000
1#
#920000
0#
#925000
1#
#930000
0#
#935000
1#
#940000
0#
#945000
1#
#950000
0#
#955000
1#
#960000
0#
#965000
1#
#970000
0#
#975000
1#
#980000
0#
#985000
1#
#990000
0#
#995000
1#
#1000000
0#
#1005000
1#
